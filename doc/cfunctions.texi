\input texinfo

@c The manual for Cfunctions.

@c This manual is copyright (C) 1998-2011  Ben Bullock.

@c This manual is free software; you can redistribute it and/or modify
@c it under the terms of the GNU General Public License as published by
@c the Free Software Foundation; either version 2 of the License, or
@c (at your option) any later version.

@c This manual is distributed in the hope that it will be useful,
@c but WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.

@c You should have received a copy of the GNU General Public License
@c along with this manual; if not, write to the Free Software
@c Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

@setfilename cfunctions.info
@settitle cfunctions

@include version.texi

@titlepage
@title Cfunctions
@author Ben Bullock
@end titlepage

@dircategory Programming
@direntry
* Cfunctions: (cfunctions.info).         Make C header files automatically
@end direntry

@node Top, Copying, (dir), (dir)

@menu
* Copying::                     Copyright and copying information 
* Introduction::                Examples 
* Invoking Cfunctions::         Command line options 
* Variable and function declarations::  
* Output files::                
* Input file format::           What the C file should look like 
* Other programs::              
* index::                       
@end menu

@node Copying, Introduction, Top, Top
@unnumbered Copying
@cindex copyright
@cindex copying Cfunctions

@noindent

Cfunctions and this manual are copyright @copyright{} 1998-2011 Ben K.
Bullock.  Some parts of the Cfunctions distribution, the files in the
subdirectory `missing', are copyright @copyright{} 1997 by the Free
Software Foundation (see the actual files for details).

Cfunctions, and this manual, are free software under the GNU General
Public Licence.  The GNU General Public Licence does not apply to the
output of Cfunctions.  The file @file{c-extensions.h}, which is used
with Cfunctions, is licenced differently.  Please refer to that file
for more information.
@cindex GNU General Public Licence
@cindex GNU GPL
@cindex GPL
@cindex @file{c-extensions.h}, licence for

@node Introduction, Invoking Cfunctions, Copying, Top
@chapter Introduction
@cindex introduction

@noindent
@noindent
This is the manual for Cfunctions version @version {}.  This manual
explains Cfunctions, a program for making header files from C files.
Cfunctions (pronounced "see-functions") 
@cindex pronunciation
@cindex external variables
gets function declarations, prototypes and global (otherwise known as
external) variable declarations from C files and makes them into header
files.

@menu
* Simple examples::             Simple examples showing Cfunctions usage
* Detailed examples::           Detailed examples with output
@end menu

@node Simple examples, Detailed examples, Introduction, Introduction
@section Simple examples

@noindent
Here are some simple examples of how to run Cfunctions.  

@itemize @bullet

@item
Cfunctions without any options reads from standard input and writes to
standard output.  For example,
@example
cfunctions a.c b.c c.c
@end example
@noindent
writes the function and global variable declarations in the three C
files to standard output.

@item
Cfunctions can make a header file for each C
file.  For example,
@example
cfunctions -i a.c b.c c.c
@end example
@noindent
creates three files @file{a.h}, @file{b.h} and @file{c.h} containing
the declarations of the three C files.

@item
Cfunctions can make one header file for several C files.  For example
@example
cfunctions -g everything  a.c b.c c.c
@end example
@noindent
creates a header file called @file{everything.h} which contains all the
function and global variable declarations of the three C
files.

@end itemize

@node Detailed examples,  , Simple examples, Introduction
@section Detailed examples

@noindent
This section gives examples using Cfunctions
as a pipe.

Input C program text to Cfunctions, for example
@example
int func (int y) @{ return 0; @}
@end example
@noindent
and Cfunctions outputs
@example
int func (int y);
@end example
@noindent
the function declaration.  Now try
@example
int @var{z};
@end example
@noindent
Cfunctions outputs
@example
extern int @var{z};
@end example
@noindent
This is a declaration of the variable @var{z} suitable for use in a
header file.  Now input
@example
extern int @var{z};
@end example
@noindent
to Cfunctions.  Cfunctions outputs nothing, because @code{extern} means
@var{z} was declared elsewhere, so it should not be declared in a header
file.  Now input
@example
static int @var{q}; 
static char * @var{tub} (int job) @{ return array[ job ]; @}
@end example
@noindent
Cfunctions outputs nothing.  That is because both @var{q} and
@var{tub} are declared with @code{static}.  Cfunctions assumes that it
is writing a header file, so it doesn't output anything declared
@code{static}.

Now, try @code{cfunctions --wrap chap}, with input
@example
int s, t, u;
char * func() @{ return "junk"; @}
@end example
@noindent
Cfunctions outputs

@example
#ifndef _CHAP
#define _CHAP
extern int s, t, u;
char * func();
#endif /* _CHAP */
@end example

@noindent
The @code{-w chap} option requested a wrapper @xref{Wrappers}.
This is already enough to declare the external variables and functions
in the input file and write them out to a header file.

@node Invoking Cfunctions, Variable and function declarations, Introduction, Top
@chapter Invoking Cfunctions
@cindex invocation

@include options.texi

@node Variable and function declarations, Output files, Invoking Cfunctions, Top
@chapter Variable and function declarations

@noindent
This chapter explains how to make Cfunctions generate correct variable
and function declarations.

@menu
* Global variables::            
* Using struct etc.::           
* typedef::                     
* Arrays::                      
* Ignoring static::             
* Traditional C::               
* Comments::                    
* Warnings::                    
@end menu

@node Global variables, Using struct etc., Variable and function declarations, Variable and function declarations
@section Global variables
@cindex global variables
@cindex external variables

@cindex @code{extern} prefix for global variables.
@noindent
Cfunctions gets global variables from C files and writes them with an
@code{extern} prefix.  For example,

@example
int x;
@end example
@noindent
becomes

@example
extern int x;
@end example
@noindent

@cindex @code{struct}
@cindex @code{union}
@cindex @code{enum}
@cindex @code{typedef}
@node Using struct etc., typedef, Global variables, Variable and function declarations
@section Using @code{struct}, @code{union}, and @code{enum}

@noindent
Cfunctions writes out @code{struct}, @code{union} and @code{enum}
declarations by copying the declaration.  For example
@example
struct bee gee;
@end example
@noindent
becomes
@example
extern struct bee gee;
@end example
@noindent
in Cfunctions's output.

@menu
* struct body::                 
* untagged structs::            
@end menu

@node struct body, untagged structs, Using struct etc., Using struct etc.
@subsection @code{struct}, @code{union}, @code{enum} body

@noindent
Cfunctions does not write the
@cindex body, of @code{struct}, @code{union}
@cindex @code{struct} body
body (part between @{ and @}) of @code{union}s, @code{struct}s and
@code{enum}s.
@cindex @code{struct}, parts copied into header
Even if the declaration of a variable contains a definition of a data
structure, Cfunctions does not write the data structure's definition.
For example,

@cindex heebygeeby
@example
struct heeby @{ int x, y; unsigned z; @} geeby;
@end example

@noindent
becomes

@example
extern struct heeby geeby;
@end example
@noindent
which will not be understandable to compilers, because @code{struct
heeby} was not declared.  To avoid this, declare structure instances
such as @code{geeby} in the above with @code{static} so that
Cfunctions ignores them.  To get a global instance of a structure like
@code{geeby}, ask Cfunctions to copy the body as well.  @xref{Extra
header information}.

@node untagged structs,  , struct body, Using struct etc.
@subsection Untagged @code{struct}s

@noindent
@cindex untagged @code{struct}
@cindex @code{struct}, untagged
Cfunctions ignores untagged structures such as 
@example
struct @{int a@} d; 
@end example
@noindent
except when copying verbatim.    @xref{Extra header information}.

@node typedef, Arrays, Using struct etc., Variable and function declarations
@section @code{typedef}

@noindent
Cfunctions ignores @code{typedef} statements except when copying
verbatim.  @xref{Extra header information}.

@node Arrays, Ignoring static, typedef, Variable and function declarations
@cindex arrays
@section Arrays

@noindent
Cfunctions outputs one dimensional array declarations with the array's
size removed.  For example, 
@example
int mung[N_MUNG];
@end example
@noindent
becomes
@example
extern int mung[];
@end example

@cindex multidimensional arrays
@cindex arrays, multidimensional
However C does not allow multidimensional arrays with any but the first
dimension removed.  Therefore for example Cfunctions writes
@example
int mung_sq[N_MUNG][N_MUNG];
@end example
@noindent
as 
@example
extern int mung_sq[][N_MUNG];
@end example
@noindent
@code{N_MUNG} might be a macro defined only in the C file Cfunctions
read the declaration from, and the C compiler would not be able to
understand this declaration.  Unfortunately, Cfunctions does not check
that an array's dimensions are valid, it merely copies them, so users
must take care to use array dimensions which remain valid in the
header file.

@node Ignoring static, Traditional C, Arrays, Variable and function declarations
@section @code{static}

@cindex @code{static}, ignored
@noindent
Cfunctions usually ignores @code{static} functions and variables.  To
make forward declarations for @code{static} C functions, or to make a
tag table which includes them, use the @code{--static} (@code{-s})
option.

@node Traditional C, Comments, Ignoring static, Variable and function declarations
@section Traditional C

@cindex Kernighan and Ritchie's book, edition 1
@noindent
Cfunctions can also make prototype declarations for traditional C files.
@cindex traditional C
(@dfn{Traditional C} is the language described in edition 1 of Kernighan
and Ritchie's book `The C programming language'.)
@cindex @code{PROTO}
For traditional C files, Cfunctions writes a macro around the
prototype function arguments.  Define this macro to give either
prototype arguments (for an ANSI C compiler) or nothing (for a
traditional C compiler).  For example
@example
int func (x, y, v)
    unsigned long y;
    char * v;
@{
  ...
@end example
@noindent
becomes
@example
int func PROTO((/* default */ int x, unsigned long y, char * v));
@end example

Then for the traditional case @code{PROTO} is defined as
@example
#define PROTO(x) ()
@end example
@noindent
and for the @sc{ANSI} C case @code{PROTO} is defined
as 
@example
#define PROTO(x) x
@end example
@noindent
which in the above example gives either
@example
int func (); /* traditional */
@end example
@noindent
or 
@example
int func (/* default */ int x, unsigned long y, char * v); /* ANSI */
@end example

By default the macro is called @code{PROTO}, but the macro name can be
changed to @var{xxx} with the @code{--proto-macro @var{xxx}}
(@code{-p@var{xxx}}) option.

The macro @code{PROTO} is defined in @file{c-extensions.h}
(@pxref{Input file format}). 

To use a different prototype name such as @var{xxx}, the user should
add a line containing the name, such as
@example
proto macro: @var{xxx}
@end example
@noindent
to a file called @file{.cfunctionsrc} in the user's home directory.

@node Comments, Warnings, Traditional C, Variable and function declarations
@section Comments

@noindent
To copy the comments in the C file into the header file, use the
@code{--write-comments} (@code{-m}) option.  This makes Cfunctions copy
the most recently read comment verbatim into the output whenever it
writes a declaration.

Cfunctions understands C++ style @code{//} comments.
GNU C allows C++ style comments
@cindex GNU C, C++ style comments allowed
@cindex C++ style comments
@cindex @code{//}
and they are quite commonly used in C files, so Cfunctions is able to
understand them.

@node Warnings,  , Comments, Variable and function declarations
@section Warnings

@noindent
Cfunctions can warn about some kinds of problems in the input files.
These warnings are optional.  To get the warnings, use the
@code{--warning} (@code{-W}) option together with one of the following:
@table @code
@item implicit
Warn about implicit @code{int} functions and function arguments.

@item implicit-int
The same as @code{implicit}

@item reserved
Warn about the use of any reserved words.

@item strict-prototypes
Warn about any functions which don't have prototypes.

@end table
Some of the warning names are based on those of GNU C, but the things
that Cfunctions warns about are not the same things as the warnings of
GNU C.

If the user wishes always to be warned about any of the above
practices, put a line such as
@example
warn: implicit strict-prototypes
@end example
@noindent
in the file called @file{.cfunctionsrc} in the user's home directory.

@node Output files, Input file format, Variable and function declarations, Top
@chapter Output files

@noindent
Cfunctions may be invoked with a list of C files as arguments.
Without arguments, Cfunctions reads from standard input and writes to
standard output.  Output may be redirected with the @code{--output
@emph{argument}} (@code{-o@emph{argument}}) command line option, where
@emph{argument} is the name of the output file.

@menu
* One header::                  Cfunctions writes one header from all files
* Individual headers::          Cfunctions writes a header for each file
* Backups::                     Make sure old files are not deleted
* Advertisement::               The banner at the top of the output file
* Wrappers::                    
* Making tag tables::           
* Spacing::                     
@end menu

@node One header, Individual headers, Output files, Output files
@section Making one header for several C files
@cindex one header

@noindent
To write information from several C files into one header file, use the
command line option @code{--global @emph{argument}}
(@code{-g@emph{argument}}).  The @emph{argument} is the base name of the
header file.  For example,

@example
cfunctions --global x a.c b.c c.c
@end example

@noindent
will generate a header file called @file{x.h} containing information
from @file{a.c}, @file{b.c} and @file{c.c}.

To include extra information in the global header which is not in any of
the C files, create a file called @file{@emph{name}.hin} where
@emph{name} is the argument to @code{--global}.  Cfunctions copies
verbatim the contents of this file after the beginning wrapper
(@pxref{Wrappers}).
@cindex global header, extra information into
@cindex .hin suffix
@cindex hin suffix

@node  Individual headers, Backups, One header, Output files
@section Making a separate header for each C file

@noindent
The option @code{--individual} (@code{-i}) makes Cfunctions write a
separate header file for each C file argument.  The name of the header
file is the C file name with an @file{.h} suffix instead of @file{.c}.
For example,

@example
cfunctions -i job.c hub.c
@end example
@noindent
creates @file{job.h} and @file{hub.h}.

To generate both `local' headers for each C file and a global header,
use the @code{--individual} and @code{--global} options together in
conjunction with @code{LOCAL} and @code{LOCAL_H} directives in the C
files.  @xref{Making local headers}.

@node Backups, Advertisement, Individual headers, Output files
@section Backups

@noindent
Cfunctions does not change C files, but it may overwrite files with a
@file{.h} suffix.  The option @code{--backup} makes Cfunctions rename
old files rather than overwrite them.

@cindex @code{SIMPLE_BACKUP_SUFFIX} environment variable
@cindex @code{VERSION_CONTROL} environment variable
If one uses this option, Cfunctions usually renames old files with a
@code{~} suffix.  The suffix can be changed with the command line
option @code{--suffix @emph{argument}} (@code{-S@emph{argument}})
where @emph{argument} is the suffix to use, or by the environment
variable @code{SIMPLE_BACKUP_SUFFIX}.  Numbered backups are also
possible.  The command line option @code{--version-control
@emph{argument}} (@code{-V @emph{argument}}) switches this on.  The
possible values of @emph{argument} are

@table @code
@item t, numbered     
make numbered backups
@item nil, existing   
numbered if numbered backups exist, simple otherwise
@item never, simple   
always make simple backups
@end table

Putting the same strings into the environment variable
@code{VERSION_CONTROL} has the same effect, and also causes the same
behaviour in GNU programs such as Emacs, Indent, Patch, and the GNU
fileutils.
@ifinfo
@inforef{Backup Names, GNU Emacs backups, emacs}.
@end ifinfo
@iftex
Refer to, for example, the GNU Emacs manual, section `Backup Names', for
more details.
@end iftex

@node Advertisement, Wrappers, Backups, Output files
@section Advertisements and banners

@cindex banner, adding your own
@cindex advert, changing
@noindent
Cfunctions usually advertises itself at the top of generated files.
To turn this advertisement off, use the option @code{--advert off}
(@code{-aoff}).  To substitute another banner, use @code{--advert}
@emph{file-name} where @emph{file-name} is the name of the file
containing the information.  Cfunctions will copy it verbatim, so
don't forget to put text inside C comments.

To always want to put the same text at the top of each generated
header file, add a line containing the file you wish to have copied,
such as
@example
advert: /home/me/mydirectory/mycopyright
@end example
@noindent
to a file called @file{.cfunctionsrc} in the user's top level or home
directory.

@node Wrappers, Making tag tables, Advertisement, Output files
@section Wrappers

@noindent
Cfunctions usually writes a `wrapper' around header files so that they
will not be read twice.
@cindex wrapper
For example, @code{cfunctions -i job.c} will generate
@example
#ifndef CFH_JOB_H
#define CFH_JOB_H
...
#endif /* CFH_JOB_H */
@end example
@noindent
Cfunctions does not write wrappers when writing to standard output.  To
force wrappers, use the option @code{--wrap @emph{argument}} (@code{-w
@emph{argument}}).  Cfunctions converts @emph{argument} to upper case
and removes bad characters, and then uses it as the macro, @code{CFH_JOB_H}
in the above example.
@cindex wrapper, for stdout output

@node Making tag tables, Spacing, Wrappers, Output files
@section Making tag tables

@noindent
A tag table is an index of functions and external variables.  The reason
that Cfunctions also makes this file is that a tag table for a C file
consists of a list of global variables and function definitions,
although in a different format to a header file.  The tag table also
includes type definitions, data structures, C unions and enumeration
constants.
@cindex @code{#line} instructions
Cfunctions understands @code{#line} instructions and it will adjust the
tag table output accordingly.

@node Spacing,  , Making tag tables, Output files
@section Spacing
@cindex format of output
@cindex GNU Indent
@cindex decorative spacing, not preserved
@noindent
Cfunctions does not preserve decorative spacing.  Cfunctions uses only
a single space for all spacing within a particular prototype.  In
fact, Cfunctions has no facilities for formatting its output to a
particular taste.  Users who wish to reformat the generated header
files may wish to use an indenting program such as GNU indent to
format the output files.
@ifinfo
@inforef{Top, GNU Indent, indent.info}.
@end ifinfo

@node Input file format, Other programs, Output files, Top
@chapter Input file format

@cindex format, for input
@cindex input format

@noindent
Cfunctions does not require any particular C file format.  However some
extra facilities of Cfunctions require formatted input files.  The
formats do not affect compilation.  The formats are designed so that
Cfunctions never needs to alter C files.

@cindex @file{c-extensions.h}
If the user uses Cfunctions's special features, Cfunctions
automatically writes
@example
#include "c-extensions.h" 
@end example
@noindent
into the generated header file.  The file @file{c-extensions.h}
contains definitions of macros which make the special features such as
C extensions work both with compilers with the C extensions, and
without them.

Cfunctions also usually copies the file itself into the current
directory.  This can be prevented with the @code{--extension}
(@code{-x}) option.

To obtain
@example
#include <c-extensions.h>
@end example
@noindent
use the @code{--include-c-ex} (@code{-I}) command line option.  In
this case Cfunctions will never copy the file into the current
directory, since that would be useless: instruct the C compiler where
to find the file (this may be with the @code{-I} option, hence the
short option name in Cfunctions is mnemonic).

@cindex GNU GPL, and @file{c-extensions.h}
@cindex @file{c-extensions.h}, licence for
Note that the file @file{c-extensions.h} is not under the GNU General
Public Licence.  It does not have any restrictions on its use.  Whatever
licencing terms your program is under, you can incorporate
@file{c-extensions.h} into it.

@menu
* C extensions::                Using C extensions with Cfunctions
* Extra header information::    Putting more information in headers
* Making local headers::        Making two headers from one file
* Extra local header information::  Putting more information in local headers
* Inline functions::            
@end menu


@node C extensions, Extra header information, Input file format, Input file format
@cindex C extensions
@section C extensions

@noindent
Cfunctions understands several GNU C extensions.  @inforef{C extensions,
GNU C extensions, gcc.info}, to find out about the GNU C extensions.
The following prefixes to functions get GNU C extensions in the
generated header file:

@table @code

@item NO_RETURN
Cfunctions writes a GNU C 
@code{__attribute__((noreturn))} suffix in the prototype.
It is a macro defined to @code{void}.
@cindex @code{NO_RETURN}
@cindex @code{__attribute__((noreturn))}

@item NO_SIDE_FX 
Cfunctions writes a GNU C @code{__attribute__((const))} suffix to the
prototype.  It is an empty macro.
@cindex @code{NO_SIDE_FX}
@cindex @code{__attribute__((const))}

@item INLINE
@xref{Inline functions}.

@item PRINT_FORMAT(a,b)
Cfunctions writes a GNU C @code{__attribute__((format(printf,a,b)))}
suffix in the prototype.  It is an empty macro.
@cindex @code{PRINT_FORMAT}
@cindex @code{__attribute__((format(printf,a,b)))}

@end table

@node Extra header information, Making local headers, C extensions, Input file format
@section Extra header information

@noindent
To include material directly into the header file, surround it with
@code{#ifdef HEADER ... #endif}.  For example,

@example
#ifdef HEADER
typedef struct dictionary Dictionary;
#endif
@end example

@cindex @code{#ifdef HEADER}
@cindex @code{HEADER}

@noindent
Cfunctions just copies everything between the @code{#ifdef} and the
@code{#endif} into the header file.  Because a macro @code{HEADER} is
not usually defined, the C compiler ignores this material in the C file.
(If by chance a macro @code{HEADER} @emph{is} already defined, change
the macro name Cfunctions recognizes with the @code{--global-macro
@emph{argument}} (@code{-G@emph{argument}}) option, where
@emph{argument} is a macro name to use instead of @code{HEADER}.)

@node Making local headers, Extra local header information, Extra header information, Input file format
@section Making `local' headers

@cindex @code{LOCAL} prefix
@noindent
When using the @code{--global} option, you may want to share some
function declarations only with a few specific files. For example,
suppose that a library @code{lib} is created from @code{job.c} and
@code{hub.c} but that only @code{hub.c} should use the function
@code{private} from @code{job.c}, not @code{lib} library users.  To hide
the @code{private} function by not putting its prototype into the
library header @code{lib.h}, make a local header for @code{job.c} by
@example
cfunctions -g lib -i job.c hub.c
@end example
@noindent
This creates @code{job.h} and @code{hub.h} as well as @code{lib.h}.  To
make the prototype of @code{private} appear in @code{job.h} and not in
@code{lib.h}, prefix @code{private} with @code{LOCAL}, and the prototype
for @code{private} will appear in @file{job.h}.  @code{LOCAL} is a C
macro defined to nothing by the @file{c-extensions.h} header file
(@pxref{C extensions}).

To make just one `local' header file to share between @file{job.c} and
@file{hub.c} use
@example
cfunctions -g lib -l private job.c hub.c
@end example
@noindent
This will create files @file{lib.h} and @file{private.h}.  The
declaration of @code{private} will go into @file{private.h} and not into
@file{lib.h}.

@node Extra local header information, Inline functions, Making local headers, Input file format
@section Extra local information

@noindent
To include information verbatim into a local header file use
@code{LOCAL_H} preprocessor wrapper in the same way as @code{#ifdef
HEADER} (@pxref{Extra header information})
@cindex @code{LOCAL_H} macro
@cindex @code{#ifdef LOCAL_H}
If by chance a macro @code{LOCAL_H} is already defined, change the name
@code{LOCAL_H} used for the wrapper with the option @code{--local-macro
@emph{argument}}, where @emph{argument} is the name of the new macro.

The option @code{--local @emph{argument}} (@code{-l@emph{argument}})
sends all the `local' header output from each C file to one header file
instead of several.  Contrast this with @code{--individual} (@code{-i})
which generates several header files, one for each input C file.  The
argument is the base name of the local header file.

@node Inline functions,  , Extra local header information, Input file format
@section Inlining functions

@cindex @code{inline} in GNU C
@cindex @code{INLINE}
@noindent
In GNU C, a function can be declared @code{inline}.  
@ifinfo
@inforef{Inline, GNU C inline, gcc.info}.
@end ifinfo
@iftex
Refer to the GNU C manual for details.
@end iftex
However, GNU C cannot `inline' a function in a separate translation unit
from the function body.  To work around this restriction, Cfunctions can
copy the entire function to a header file so that it can be used over
several translation units.  It uses the special GNU C prefix
@cindex @code{extern inline}
@code{extern inline} and a wrapper so as not to confuse other compilers.

To get Cfunctions to do this, prefix the function with Cfunctions's
keyword @code{INLINE} and run Cfunctions.  For example,
@example
INLINE int square (int i) 
@{
  return i*i;
@} 
@end example
@noindent
generates
@example
#ifdef X_INLINE
extern inline int square (int i)
@{
  return i*i;
@}
#else /* not X_INLINE */
int square (int i);
#endif /* X_INLINE */
@end example
@noindent
in the output header file.  Cfunctions's special header file
@file{c-extensions.h} defines the macro @code{X_INLINE} for GNU C, but
not for other C compilers and it defines the macro @code{INLINE} to
nothing, so as not to cause portability problems.

@node Other programs, index, Input file format, Top
@chapter Using Cfunctions with other programs

@noindent
This chapter explains some subtleties of using Cfunctions with
other programs.

@menu
* make::                        Using Cfunctions with `make'
* CPP::                         Using Cfunctions with the C preprocessor
* C compiler::                  
* fake-cfunctions::             
@end menu

@node make, CPP, Other programs, Other programs
@section Using Cfunctions with @code{make}

@noindent
It is possible to use Cfunctions to generate header files with @code{make}.
There are two ways to do this.  One way is to write explicit rules for
generating header files in a `Makefile'.  For example,
@cindex make, explicit rules

@example
job.h:         job.c
        cfunctions --individual job.c
@end example

Another way is to teach @code{make} a rule for making header files from C
files.
@cindex make, teaching patterns

@example
.c.h:   
        cfunctions --individual $<
@end example

@cindex make, fooling
The disadvantage of the rule method is that it might fool @code{make}
into making a header file when not required, or even overwriting a
non-Cfunctions header file.  This definitely should not be used unless
all of a project's header files are generated by Cfunctions; users who
do use it are recommended to use @code{--backup} in conjunction with
it.

When using this kind of rule, a harmless but odd thing will occur.  If
Cfunctions sees that it has generated a new header file identical to an
old one, it keeps the old one and discards the new one.  When this
happens, @code{make} runs Cfunctions again the next time.  This might
seem like an error, but it is a feature.  If Cfunctions did update a
header file even when it was identical to an old one, @code{make} would
then recompile every dependency of that header file (in other words it
would recompile all the C files which @code{#include}d the header file).
This would be inconvenient: Cfunctions runs much faster than a C
compiler, so it is less inconvenient to run Cfunctions uselessly than to
force useless recompilation.

@node CPP, C compiler, make, Other programs
@section Using Cfunctions with the C preprocessor
@cindex C preprocessor
@cindex @code{cpp}

@noindent
There are some coding practices with the C preprocessor which Cfunctions
cannot cope with.  Either avoid these coding practices or send
Cfunctions the output of the C preprocessor by using the @code{--cpp}
(@code{-C}) option.  With this option, you can pass arguments to the
preprocessor with the @code{--cpp-arg} (@code{-P}) argument.  For
example

@example
cfunctions -C -P -DGUBBINS
@end example
@noindent
will send the C preprocessor the argument @code{-DGUBBINS}.


@menu
* Redefined C::                 
* Mixed ANSI and traditional::  
* Declaring functions via the preprocessor::  
@end menu

@node Redefined C, Mixed ANSI and traditional, CPP, CPP
@subsection Redefined C
@cindex redefined C
@cindex C, redefined

@noindent
Cfunctions cannot possibly process C code which uses macros like
@example
#define begin @{
@end example
@cindex @code{begin} macro
@noindent
or anything else of the sort.

@node Mixed ANSI and traditional, Declaring functions via the preprocessor, Redefined C, CPP
@subsection Mixed ANSI and traditional C declarations

@noindent
Some people write function declarations as follows:
@example
#if ANSI
int options (int argc, char ** argv)
#else
int options (argc, argv)
    int argc;
    char ** argv;
#endif
@end example
@noindent
This is not necessary, unless your program needs to be compilable by C++
as well as traditional C compilers.  ANSI C allows you to write function
declarations in either way.  Cfunctions cannot currently understand the
above syntax, so if you need backwards compatibility just use the
old-style function declaration on its own.

@node Declaring functions via the preprocessor,  , Mixed ANSI and traditional, CPP
@subsection Declaring functions via the preprocessor

@noindent
Some people declare functions via the preprocessor for the sake of
convenience.  Unfortunately Cfunctions can't parse these functions
unless you use the @code{-C} option.

@node C compiler, fake-cfunctions, CPP, Other programs
@section C compiler

@noindent
If there is an error in a header file generated by Cfunctions, the
compiler usually writes a message which refers to the line number and
file name of the header file.  Because the error is actually in the
original C file, this is inconvenient.

To make compiler messages refer to lines in a C file and not in a
Cfunctions generated header file, use the @code{--write-line-numbers}
(@code{-n}) option.  Cfunctions will generate compiler directives of the
form 
@example
#line @var{number} "@var{file}.c"
@end example
@noindent
just before it writes each declaration.  Here @var{number} is the line
number of the C file @file{@var{file}.c} that the function or variable
came from.  The line numbers may be slightly off, because Cfunctions
does not preserve the decorative spacing (@pxref{Spacing}).  However,
along, with the compiler message they should be enough to indicate where
problems lie.

Particularly this is useful with the GNU Emacs `compile-mode' to go to
the lines in the original C file which contain the errors.

Unfortunately this will force Cfunctions to update your header file
every time that it is slightly changed, causing possible unnecessary
recompilations of associated files.

If you always want to write line numbers in generated header
files, add the line 
@example
line numbers: 1
@end example
@noindent
to a file @file{.cfunctionsrc} in your top level directory.

@node fake-cfunctions,  , C compiler, Other programs
@section The @file{fake-cfunctions} script

@noindent
@cindex @file{fake-cfunctions}
@file{fake-cfunctions} is a fake version of Cfunctions which uses
@file{touch} to update header files.  The reason for having this is so
that one can distribute programs using Cfunctions with `make' rules for
generating header files, without getting user complaints.  For example
in Cfunctions's @file{configure.in} script for GNU Autoconf there is a
test for Cfunctions as follows:
@example
CWD=`pwd`
AC_CHECK_PROG(CFUNCTIONS, cfunctions, cfunctions,
              "$CWD/fake-cfunctions")
@end example
@noindent
then in each @file{Makefile.in} there is a variable @code{CFUNCTIONS}
which the @file{configure} script fills in:
@example
CFUNCTIONS = @@CFUNCTIONS@@
@end example
@noindent
In the case that the user doesn't have Cfunctions installed,
@file{configure} writes something like (assuming the current working
directory is @file{/tmp/cfunctions-0.24})
@example
CFUNCTIONS = /tmp/cfunctions-0.24/fake-cfunctions
@end example
@noindent
whereas if the user does have Cfunctions, @file{configure} writes
@example
CFUNCTIONS = cfunctions
@end example
@noindent
@file{fake-cfunctions} just updates the file's modification time with
@file{touch} in order to fool @file{make}, so it won't work if the user
makes major modifications to the C files, but in that case the user
should get Cfunctions.

@cindex GNU GPL, and @file{fake-cfunctions}
Please note that the @file{fake-cfunctions} script is not under the GNU
GPL and you may use it whatever your licence terms are.

@node index,  , Other programs, Top
@unnumbered Index
@printindex cp
@contents
@bye


