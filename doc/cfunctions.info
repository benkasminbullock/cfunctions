This is cfunctions.info, produced by makeinfo version 4.8 from
./cfunctions.texi.

INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* Cfunctions: (cfunctions.info).         Make C header files automatically
END-INFO-DIR-ENTRY


File: cfunctions.info,  Node: Top,  Next: Copying,  Prev: (dir),  Up: (dir)

* Menu:

* Copying::                     Copyright and copying information
* Introduction::                Examples
* Invoking Cfunctions::         Command line options
* Variable and function declarations::
* Output files::
* Input file format::           What your C file should look like
* Other programs::
* index::


File: cfunctions.info,  Node: Copying,  Next: Introduction,  Prev: Top,  Up: Top

Copying
*******

Cfunctions and this manual are copyright (C) 1998 Ben K.  Bullock.
Some parts of the Cfunctions distribution, the files in the
subdirectory `missing', are copyright (C) 1997 by the Free Software
Foundation (see the actual files for details).

   Cfunctions, and this manual, are free software under the GNU General
Public Licence (otherwise known as the GNU GPL or just the GPL.  The
GNU General Public Licence is in the file `COPYING' in the Cfunctions
distribution directory.  The GNU General Public Licence does not apply
to the output of Cfunctions.  The file `c-extensions.h', which is used
with Cfunctions, is licenced differently.  Please refer to that file
for more information.  

   You can find the GNU General Public Licence in the GNU Emacs info
section.  *note The GNU General Public Licence: (emacs)Copying.


File: cfunctions.info,  Node: Introduction,  Next: Invoking Cfunctions,  Prev: Copying,  Up: Top

1 Introduction
**************

This is the manual for Cfunctions version 0.27.  This manual explains
Cfunctions, a program for making header files from C files.  Cfunctions
(pronounced "see-functions") gets function declarations, prototypes and
global (otherwise known as external) variable declarations from C files
and makes them into header files.

* Menu:

* Simple examples::             Simple examples showing Cfunctions usage
* Detailed examples::           Detailed examples with output


File: cfunctions.info,  Node: Simple examples,  Next: Detailed examples,  Prev: Introduction,  Up: Introduction

1.1 Simple examples
===================

Here are some simple examples of how to run Cfunctions.  If you have
already compiled the program, you might like to try it out on some C
files using the following examples as a template.

   * Cfunctions without any options reads from standard input and
     writes to standard output.  For example,
          cfunctions a.c b.c c.c
     writes the function and global variable declarations in the three C
     files to standard output.

   * Cfunctions can make an individual header file for each of a set of
     C files.  For example
          cfunctions -i a.c b.c c.c
     creates three files `a.h', `b.h' and `c.h' containing the function
     and global variable declarations of the three C files.

   * Cfunctions can make one header file for several C files.  For
     example
          cfunctions -g everything  a.c b.c c.c
     creates a header file called `everything.h' which contains all the
     function and global variable declarations of the three C files.



File: cfunctions.info,  Node: Detailed examples,  Prev: Simple examples,  Up: Introduction

1.2 Detailed examples
=====================

This section gives some examples that you can type in to Cfunctions
using it as a pipe, reading standard input.

   Input some C to Cfunctions, for example
     int func (int y) { return 0; }
   and Cfunctions outputs
     int func (int y);
   the function declaration.  Now try
     int Z;
   Cfunctions outputs
     extern int Z;
   This is a declaration of the variable Z suitable for use in a header
file.  Now input
     extern int Z;
   to Cfunctions.  Cfunctions outputs nothing, because `extern' means Z
was declared elsewhere, so it should not be declared in a header file.
Now input
     static int Q;
     static char * TUB (int job) { return array[ job ]; }
   Cfunctions outputs nothing.  That is because both Q and TUB are
declared with `static'.  Cfunctions assumes that it is writing a header
file, so it doesn't output anything declared `static'.

   Now, try `cfunctions --wrap chap', with input
     int s, t, u;
     char * func() { return "junk"; }
   Cfunctions outputs

     #ifndef _CHAP
     #define _CHAP
     extern int s, t, u;
     char * func();
     #endif /* _CHAP */

because the `-w chap' option requested a wrapper *Note Wrappers::.
This is already enough to declare the external variables and functions
in the input file and write them out to a header file.


File: cfunctions.info,  Node: Invoking Cfunctions,  Next: Variable and function declarations,  Prev: Introduction,  Up: Top

2 Invoking Cfunctions
*********************

Cfunctions can be configured with a file `.cfunctionsrc' in your home
directory.  The possible command-line and configuration options for
Cfunctions are

`-a  ARGUMENT'
`--advert  ARGUMENT'
     If ARGUMENT is `off', don't print an advert.  If ARGUMENT is a
     file name, print the file instead.  *Note Advertisement::.  You
     can also control this with a line `advert' in `.cfunctionsrc'

`-b'
`--backup'
     Back up `.h' files.  *Note Backups::.  You can also control this
     with a line `backup' in `.cfunctionsrc'

`-c'
`--copy-c-ex'
     Copy the `c-extensions.h' into the header file.  *Note C
     extensions::.  You can also control this with a line `copy c ex'
     in `.cfunctionsrc'

`-C'
`--cpp'
     Pass input through the C preprocessor.  *Note CPP::.

`-D  ARGUMENT'
`--debug  ARGUMENT'
     Set debugging option ARGUMENT.

`-e'
`--etags'
     Create an Emacs tag table.

`-g  ARGUMENT'
`--global  ARGUMENT'
     Write one global header for all C files.  *Note One header::.

`-G  ARGUMENT'
`--global-macro  ARGUMENT'
     Give global header macro the name ARGUMENT.  *Note Extra header
     information::.  You can also control this with a line `global
     macro' in `.cfunctionsrc'

`-h'
`--help'
     Print a help message and exit.

`-I'
`--include-c-ex'
     Write #include <c-extensions.h>.  *Note C extensions::.  You can
     also control this with a line `include c ex' in `.cfunctionsrc'

`-i'
`--individual'
     Write an individual header for each C file.  *Note Individual
     headers::.

`-k'
`--keep'
     Don't delete generated .h files which are empty.

`-l  ARGUMENT'
`--local  ARGUMENT'
     Write one local header file for all C files.  *Note Extra local
     header information::.

`-L  ARGUMENT'
`--local-macro  ARGUMENT'
     Give local header macro the name ARGUMENT.  *Note Extra local
     header information::.  You can also control this with a line
     `local macro' in `.cfunctionsrc'

`-m'
`--write-comments'
     Write comments to header file.  *Note Warnings::.  You can also
     control this with a line `warn' in `.cfunctionsrc'

`-n'
`--line-numbers'
     Write #line information in the .h files.  *Note C compiler::.  You
     can also control this with a line `line numbers' in `.cfunctionsrc'

`-o  ARGUMENT'
`--output  ARGUMENT'
     Redirect standard output to ARGUMENT.  *Note Output files::.

`-P  ARGUMENT'
`--cpp-arg  ARGUMENT'
     Pass ARGUMENT to the C preprocessor.  *Note CPP::.

`-p  ARGUMENT'
`--proto-macro  ARGUMENT'
     Give prototype macro the name ARGUMENT.  *Note Traditional C::.
     You can also control this with a line `proto macro' in
     `.cfunctionsrc'

`-s'
`--static'
     Don't ignore things declared `static'.  *Note Ignoring static::.

`-S  ARGUMENT'
`--suffix  ARGUMENT'
     Use suffix `ARGUMENT' for simple backups.  *Note Backups::.  You
     can also control this with a line `backup suffix' in
     `.cfunctionsrc'

`-t'
`--tags'
     Create a tag table.  *Note Making tag tables::.

`-u'
`--no-upgrade'
     Don't upgrade traditional C.

`-v'
`--version'
     Write version information and exit.  *Note Backups::.  You can
     also control this with a line `version control' in `.cfunctionsrc'

`-V  ARGUMENT'
`--version-control  ARGUMENT'
     Use version control style ARGUMENT.  *Note Wrappers::.

`-W  ARGUMENT'
`--warn  ARGUMENT'
     Warn about malpractices.

`-w  ARGUMENT'
`--wrap  ARGUMENT'
     Write a wrapper when writing to stdout.  *Note Comments::.  You
     can also control this with a line `write comments' in
     `.cfunctionsrc'

`-x'
`--extensions'
     Don't copy the `c-extensions.h' file.  *Note Input file format::.



File: cfunctions.info,  Node: Variable and function declarations,  Next: Output files,  Prev: Invoking Cfunctions,  Up: Top

3 Variable and function declarations
************************************

This chapter explains how to make Cfunctions generate correct variable
and function declarations.

* Menu:

* Global variables::
* Using struct etc.::
* typedef::
* Arrays::
* Ignoring static::
* Traditional C::
* Comments::
* Warnings::


File: cfunctions.info,  Node: Global variables,  Next: Using struct etc.,  Prev: Variable and function declarations,  Up: Variable and function declarations

3.1 Global variables
====================

Cfunctions gets global variables from C files and writes them with an
`extern' prefix.  For example,

     int x;
   becomes

     extern int x;
   It does not prefix functions with `extern', because there is no
point in doing so.


File: cfunctions.info,  Node: Using struct etc.,  Next: typedef,  Prev: Global variables,  Up: Variable and function declarations

3.2 Using `struct', `union', and `enum'
=======================================

Cfunctions writes out `struct', `union' and `enum' declarations by
copying the declaration.  For example
     struct bee gee;
   becomes
     extern struct bee gee;
   in Cfunctions's output.

* Menu:

* struct body::
* untagged structs::


File: cfunctions.info,  Node: struct body,  Next: untagged structs,  Prev: Using struct etc.,  Up: Using struct etc.

3.2.1 `struct', `union', `enum' body
------------------------------------

Cfunctions does not write the body (part between { and }) of `union's,
`struct's and `enum's.  Even if the declaration of a variable contains
a definition of a data structure, Cfunctions does not write the data
structure's definition.  For example,

     struct heeby { int x, y; unsigned z; } geeby;

becomes

     extern struct heeby geeby;
   which will not be understandable to compilers, because `struct
heeby' was not declared: you will get an error message about the
`incomplete type'.  To avoid this problem, declare structure instances
such as `geeby' in the above with `static' so that Cfunctions ignores
them.  When you want a global instance of a structure like `geeby', ask
Cfunctions to copy the body as well.  *Note Extra header information::.


File: cfunctions.info,  Node: untagged structs,  Prev: struct body,  Up: Using struct etc.

3.2.2 Untagged `struct's
------------------------

Cfunctions ignores untagged structures such as
     struct {int a} d;
   except when copying verbatim.    *Note Extra header information::.


File: cfunctions.info,  Node: typedef,  Next: Arrays,  Prev: Using struct etc.,  Up: Variable and function declarations

3.3 `typedef'
=============

Cfunctions ignores `typedef' statements except when copying verbatim.
*Note Extra header information::.


File: cfunctions.info,  Node: Arrays,  Next: Ignoring static,  Prev: typedef,  Up: Variable and function declarations

3.4 Arrays
==========

Cfunctions outputs one dimensional array declarations with the array's
size removed.  For example,
     int mung[N_MUNG];
   becomes
     extern int mung[];

   However C does not allow multidimensional arrays with any but the
first dimension removed.  Therefore for example Cfunctions writes
     int mung_sq[N_MUNG][N_MUNG];
   as
     extern int mung_sq[][N_MUNG];
   `N_MUNG' might be a macro defined only in the C file Cfunctions read
the declaration from, and the C compiler would choke on this
declaration.  Cfunctions does not check that an array's dimensions are
valid, it merely copies them, so users must use array dimensions which
remain valid in the header file.


File: cfunctions.info,  Node: Ignoring static,  Next: Traditional C,  Prev: Arrays,  Up: Variable and function declarations

3.5 `static'
============

Cfunctions usually ignores `static' functions and variables .  To make
forward declarations for `static' C functions, or to make a tag table
which includes them, use the `--static' (`-s') option.


File: cfunctions.info,  Node: Traditional C,  Next: Comments,  Prev: Ignoring static,  Up: Variable and function declarations

3.6 Traditional C
=================

Cfunctions can also make prototype declarations for traditional C files.  ("Traditional
C" is the language described in edition 1 of Kernighan and Ritchie's
book `The C programming language'.)  For traditional C files,
Cfunctions writes a macro around the prototype function arguments.  You
then have to define this macro to give either prototype arguments (for
an ANSI C compiler) or nothing (for a traditional C compiler).  For
example
     int func (x, y, v)
         unsigned long y;
         char * v;
     {
       ...
   becomes
     int func PROTO((/* default */ int x, unsigned long y, char * v));

   Then for the traditional case `PROTO' is defined as
     #define PROTO(x) ()
   and for the ANSI C case `PROTO' is defined as
     #define PROTO(x) x
   which in the above example gives you either
     int func (); /* traditional */
   or
     int func (/* default */ int x, unsigned long y, char * v); /* ANSI */

   By default the macro is called `PROTO', but you can change the macro
name to XXX with the `--proto-macro XXX' (`-pXXX') option.

   The macro `PROTO' is defined in `c-extensions.h' (*note Input file
format::).  If you change the macro name, you also need to ensure that
your new macro name is defined.

   If you always want to use a different prototype name such as XXX,
add a line containing the name, such as
     proto macro: XXX
   to a file called `.cfunctionsrc' in your top level or home directory.


File: cfunctions.info,  Node: Comments,  Next: Warnings,  Prev: Traditional C,  Up: Variable and function declarations

3.7 Comments
============

To copy the comments in the C file into the header file, use the
`--write-comments' (`-m') option.  This makes Cfunctions copy the most
recently read comment verbatim into the output whenever it writes a
declaration.

   Cfunctions understands C++ style `//' comments.  GNU C allows C++
style comments and they are quite commonly used in C files, so
Cfunctions is able to understand them.


File: cfunctions.info,  Node: Warnings,  Prev: Comments,  Up: Variable and function declarations

3.8 Warnings
============

Cfunctions can warn about some kinds of problems in the input files.
These warnings are optional.  To get the warnings, use the `--warning'
(`-W') option together with one of the following:
`implicit'
     Warn about implicit `int' functions and function arguments.

`implicit-int'
     The same as `implicit'

`reserved'
     Warn about the use of any reserved words.

`strict-prototypes'
     Warn about any functions which don't have prototypes.

   Some of the warning names are based on those of GNU C, but the things
that Cfunctions warns about are not the same things as the warnings of
GNU C.

   If you always want to be warned about any of the above practices, put
a line such as
     warn: implicit strict-prototypes
   to a file called `.cfunctionsrc' in your top level or home directory.


File: cfunctions.info,  Node: Output files,  Next: Input file format,  Prev: Variable and function declarations,  Up: Top

4 Output files
**************

You can invoke Cfunctions with a list of C files as arguments.  Without
arguments, Cfunctions reads from standard input and writes to standard
output.  You can redirect this with the `--output _argument_'
(`-o_argument_') command line option, where _argument_ is the name of
the output file.

* Menu:

* One header::                  Cfunctions writes one header from all files
* Individual headers::          Cfunctions writes a header for each file
* Backups::                     Make sure old files are not deleted
* Advertisement::               The banner at the top of the output file
* Wrappers::
* Making tag tables::
* Spacing::


File: cfunctions.info,  Node: One header,  Next: Individual headers,  Prev: Output files,  Up: Output files

4.1 Making one header for several C files
=========================================

To write information from several C files into one header file, use the
command line option `--global _argument_' (`-g_argument_').  The
_argument_ is the base name of the header file.  For example,

     cfunctions --global x a.c b.c c.c

will generate a header file called `x.h' containing information from
`a.c', `b.c' and `c.c'.

   To include extra information in the global header which is not in
any of the C files, create a file called `_name_.hin' where _name_ is
the argument to `--global'.  Cfunctions copies verbatim the contents of
this file after the beginning wrapper (*note Wrappers::).  


File: cfunctions.info,  Node: Individual headers,  Next: Backups,  Prev: One header,  Up: Output files

4.2 Making a separate header for each C file
============================================

The option `--individual' (`-i') makes Cfunctions write a separate
header file for each C file argument.  The name of the header file is
the C file name with an `.h' suffix instead of `.c'.  For example,

     cfunctions -i job.c hub.c
   creates `job.h' and `hub.h'.

   To generate both `local' headers for each C file and a global header,
use the `--individual' and `--global' options together in conjunction
with `LOCAL' and `LOCAL_H' directives in your C files.  *Note Making
local headers::.


File: cfunctions.info,  Node: Backups,  Next: Advertisement,  Prev: Individual headers,  Up: Output files

4.3 Backups
===========

Cfunctions does not change C files, but it may overwrite files with a
`.h' suffix.  The option `--backup' makes Cfunctions rename old files
rather than overwrite them.

   If one uses this option, Cfunctions usually renames old files with a
`~' suffix.  You can change the suffix with the command line option
`--suffix _argument_' (`-S_argument_') where _argument_ is the suffix
to use, or by the environment variable `SIMPLE_BACKUP_SUFFIX'.
Numbered backups are also possible.  The command line option
`--version-control _argument_' (`-V _argument_') switches this on.  The
possible values of _argument_ are

`t, numbered'
     make numbered backups

`nil, existing'
     numbered if numbered backups exist, simple otherwise

`never, simple'
     always make simple backups

   Putting the same strings into the environment variable
`VERSION_CONTROL' has the same effect, and also causes the same
behaviour in GNU programs such as Emacs, Indent, Patch, and the GNU
fileutils.  *note GNU Emacs backups: (emacs)Backup Names.


File: cfunctions.info,  Node: Advertisement,  Next: Wrappers,  Prev: Backups,  Up: Output files

4.4 Advertisements and banners
==============================

Cfunctions usually advertises itself at the top of generated files.  To
turn this advertisement off, use the option `--advert off' (`-aoff').
To substitute another banner, use `--advert' _file-name_ where
_file-name_ is the name of the file containing your information.
Cfunctions will copy it verbatim, so don't forget to put text inside C
comments.

   If you always want to put the same text at the top of each generated
header file, add a line containing the file you wish to have copied,
such as
     advert: /home/me/mydirectory/mycopyright
   to a file called `.cfunctionsrc' in your top level or home directory.


File: cfunctions.info,  Node: Wrappers,  Next: Making tag tables,  Prev: Advertisement,  Up: Output files

4.5 Wrappers
============

Cfunctions usually writes a `wrapper' around header files so that they
will not be read twice.  For example, `cfunctions -i job.c' will
generate
     #ifndef CFH_JOB_H
     #define CFH_JOB_H
     ...
     #endif /* CFH_JOB_H */
   Cfunctions does not write wrappers when writing to standard output.
To force wrappers, use the option `--wrap _argument_' (`-w
_argument_').  Cfunctions converts _argument_ to upper case and removes
bad characters, and then uses it as the macro, `CFH_JOB_H' in the above
example.  


File: cfunctions.info,  Node: Making tag tables,  Next: Spacing,  Prev: Wrappers,  Up: Output files

4.6 Making tag tables
=====================

A tag table is an index of functions and external variables.  The reason
that Cfunctions also makes this file is that a tag table for a C file
consists of a list of global variables and function definitions,
although in a different format to a header file.  The tag table also
includes type definitions, data structures, C unions and enumeration
constants.  Cfunctions understands `#line' instructions and it will
adjust the tag table output accordingly.


File: cfunctions.info,  Node: Spacing,  Prev: Making tag tables,  Up: Output files

4.7 Spacing
===========

Cfunctions does not preserve decorative spacing.  Cfunctions uses only a
single space for all spacing within a particular prototype.  In fact,
Cfunctions has no facilities for formatting its output to a particular
taste.  To reformat the generated header files according to your tastes,
use an indenting program such as GNU indent.  *note GNU Indent:
(indent.info)Top.


File: cfunctions.info,  Node: Input file format,  Next: Other programs,  Prev: Output files,  Up: Top

5 Input file format
*******************

Cfunctions does not require any particular C file format.  However some
extra facilities of Cfunctions require formatted input files.  The
formats do not affect compilation.  The formats are designed so that
Cfunctions never needs to alter C files.

   If you use Cfunctions's special features, Cfunctions automatically
writes
     #include "c-extensions.h"
   into your generated header file.  The file `c-extensions.h' contains
definitions of macros which make the special features such as C
extensions work both with compilers with the C extensions, and without
them.

   Cfunctions also usually copies the file itself into the current
directory.  You can prevent this with the `--extension' (`-x') option.

   If you prefer the following type of statement,
     #include <c-extensions.h>
   use the `--include-c-ex' (`-I') command line option.  In this case
Cfunctions will never copy the file into the current directory, since
that would be useless: you should instruct the C compiler where to find
the file (this may be with the `-I' option, hence the short option name
in Cfunctions is mnemonic).

   Note that the file `c-extensions.h' is not under the GNU General
Public Licence.  It does not have any restrictions on its use.  Whatever
licencing terms your program is under, you can incorporate
`c-extensions.h' into it.

* Menu:

* C extensions::                Using C extensions with Cfunctions
* Extra header information::    Putting more information in headers
* Making local headers::        Making two headers from one file
* Extra local header information::  Putting more information in local headers
* Inline functions::


File: cfunctions.info,  Node: C extensions,  Next: Extra header information,  Prev: Input file format,  Up: Input file format

5.1 C extensions
================

Cfunctions understands several GNU C extensions.  *note GNU C
extensions: (gcc.info)C extensions, to find out about the GNU C
extensions.  The following prefixes to functions get GNU C extensions
in the generated header file:

`NO_RETURN'
     Cfunctions writes a GNU C `__attribute__((noreturn))' suffix in
     the prototype.  It is a macro defined to `void'.  

`NO_SIDE_FX'
     Cfunctions writes a GNU C `__attribute__((const))' suffix to the
     prototype.  It is an empty macro.  

`INLINE'
     *Note Inline functions::.

`PRINT_FORMAT(a,b)'
     Cfunctions writes a GNU C `__attribute__((format(printf,a,b)))'
     suffix in the prototype.  It is an empty macro.  



File: cfunctions.info,  Node: Extra header information,  Next: Making local headers,  Prev: C extensions,  Up: Input file format

5.2 Extra header information
============================

To include material directly into the header file, surround it with
`#ifdef HEADER ... #endif'.  For example,

     #ifdef HEADER
     typedef struct dictionary Dictionary;
     #endif

Cfunctions just copies everything between the `#ifdef' and the `#endif'
into the header file.  Because a macro `HEADER' is not usually defined,
the C compiler ignores this material in the C file.  (If by chance a
macro `HEADER' _is_ already defined, change the macro name Cfunctions
recognizes with the `--global-macro _argument_' (`-G_argument_')
option, where _argument_ is a macro name to use instead of `HEADER'.)


File: cfunctions.info,  Node: Making local headers,  Next: Extra local header information,  Prev: Extra header information,  Up: Input file format

5.3 Making `local' headers
==========================

When using the `--global' option, you may want to share some function
declarations only with a few specific files. For example, suppose that
a library `lib' is created from `job.c' and `hub.c' but that only
`hub.c' should use the function `private' from `job.c', not `lib'
library users.  To hide the `private' function by not putting its
prototype into the library header `lib.h', make a local header for
`job.c' by
     cfunctions -g lib -i job.c hub.c
   This creates `job.h' and `hub.h' as well as `lib.h'.  To make the
prototype of `private' appear in `job.h' and not in `lib.h', prefix
`private' with `LOCAL', and the prototype for `private' will appear in
`job.h'.  `LOCAL' is a C macro defined to nothing by the
`c-extensions.h' header file (*note C extensions::).

   To make just one `local' header file to share between `job.c' and
`hub.c' use
     cfunctions -g lib -l private job.c hub.c
   This will create files `lib.h' and `private.h'.  The declaration of
`private' will go into `private.h' and not into `lib.h'.


File: cfunctions.info,  Node: Extra local header information,  Next: Inline functions,  Prev: Making local headers,  Up: Input file format

5.4 Extra local information
===========================

To include information verbatim into a local header file use `LOCAL_H'
preprocessor wrapper in the same way as `#ifdef HEADER' (*note Extra
header information::) If by chance a macro `LOCAL_H' is already
defined, change the name `LOCAL_H' used for the wrapper with the option
`--local-macro _argument_', where _argument_ is the name of the new
macro.

   The option `--local _argument_' (`-l_argument_') sends all the
`local' header output from each C file to one header file instead of
several.  Contrast this with `--individual' (`-i') which generates
several header files, one for each input C file.  The argument is the
base name of the local header file.


File: cfunctions.info,  Node: Inline functions,  Prev: Extra local header information,  Up: Input file format

5.5 Inlining functions
======================

In GNU C, a function can be declared `inline'.  *note GNU C inline:
(gcc.info)Inline.  However, GNU C cannot `inline' a function in a
separate translation unit from the function body.  To work around this
restriction, Cfunctions can copy the entire function to a header file
so that it can be used over several translation units.  It uses the
special GNU C prefix `extern inline' and a wrapper so as not to confuse
other compilers.

   To get Cfunctions to do this, prefix the function with Cfunctions's
keyword `INLINE' and run Cfunctions.  For example,
     INLINE int square (int i)
     {
       return i*i;
     }
   generates
     #ifdef X_INLINE
     extern inline int square (int i)
     {
       return i*i;
     }
     #else /* not X_INLINE */
     int square (int i);
     #endif /* X_INLINE */
   in the output header file.  Cfunctions's special header file
`c-extensions.h' defines the macro `X_INLINE' for GNU C, but not for
other C compilers and it defines the macro `INLINE' to nothing, so as
not to cause portability problems.


File: cfunctions.info,  Node: Other programs,  Next: index,  Prev: Input file format,  Up: Top

6 Using Cfunctions with other programs
**************************************

This chapter explains some subtleties of using Cfunctions with other
programs.

* Menu:

* make::                        Using Cfunctions with `make'
* CPP::                         Using Cfunctions with the C preprocessor
* C compiler::
* fake-cfunctions::


File: cfunctions.info,  Node: make,  Next: CPP,  Prev: Other programs,  Up: Other programs

6.1 Using Cfunctions with `make'
================================

It is possible to use Cfunctions to generate header files with `make'.
There are two ways to do this.  One way is to write explicit rules for
generating header files in a `Makefile'.  For example, 

     job.h:         job.c
             cfunctions --individual job.c

   Another way is to teach `make' a rule for making header files from C
files.  

     .c.h:
             cfunctions --individual $<

   The disadvantage of the rule method is that it might fool `make'
into making a header file when not required, or even overwriting a
non-Cfunctions header file.  You definitely should not use this unless
all your header files are generated by Cfunctions, and if you do use it,
I recommend you to use `--backup' as well.

   When using this kind of rule, a harmless but odd thing will occur.
If Cfunctions sees that it has generated a new header file identical to
an old one, it keeps the old one and discards the new one.  When this
happens, `make' runs Cfunctions again the next time.  This might seem
like an error, but it is a feature.  If Cfunctions did update a header
file even when it was identical to an old one, `make' would then
recompile every dependency of that header file (in other words it would
recompile all the C files which `#include'd the header file).  This
would be inconvenient: Cfunctions runs much faster than a C compiler,
so it is less inconvenient to run Cfunctions uselessly than to force
useless recompilation.


File: cfunctions.info,  Node: CPP,  Next: C compiler,  Prev: make,  Up: Other programs

6.2 Using Cfunctions with the C preprocessor
============================================

There are some coding practices with the C preprocessor which Cfunctions
cannot cope with.  Either avoid these coding practices or send
Cfunctions the output of the C preprocessor by using the `--cpp' (`-C')
option.  With this option, you can pass arguments to the preprocessor
with the `--cpp-arg' (`-P') argument.  For example

     cfunctions -C -P -DGUBBINS
   will send the C preprocessor the argument `-DGUBBINS'.

* Menu:

* Redefined C::
* Mixed ANSI and traditional::
* Declaring functions via the preprocessor::


File: cfunctions.info,  Node: Redefined C,  Next: Mixed ANSI and traditional,  Prev: CPP,  Up: CPP

6.2.1 Redefined C
-----------------

Cfunctions cannot possibly process C code which uses macros like
     #define begin {
   or anything else of the sort.


File: cfunctions.info,  Node: Mixed ANSI and traditional,  Next: Declaring functions via the preprocessor,  Prev: Redefined C,  Up: CPP

6.2.2 Mixed ANSI and traditional C declarations
-----------------------------------------------

Some people write function declarations as follows:
     #if ANSI
     int options (int argc, char ** argv)
     #else
     int options (argc, argv)
         int argc;
         char ** argv;
     #endif
   This is not necessary, unless your program needs to be compilable by
C++ as well as traditional C compilers.  ANSI C allows you to write
function declarations in either way.  Cfunctions cannot currently
understand the above syntax, so if you need backwards compatibility
just use the old-style function declaration on its own.


File: cfunctions.info,  Node: Declaring functions via the preprocessor,  Prev: Mixed ANSI and traditional,  Up: CPP

6.2.3 Declaring functions via the preprocessor
----------------------------------------------

Some people declare functions via the preprocessor for the sake of
convenience.  Unfortunately Cfunctions can't parse these functions
unless you use the `-C' option.


File: cfunctions.info,  Node: C compiler,  Next: fake-cfunctions,  Prev: CPP,  Up: Other programs

6.3 C compiler
==============

If there is an error in a header file generated by Cfunctions, the
compiler usually writes a message which refers to the line number and
file name of the header file.  Because the error is actually in the
original C file, this is inconvenient.

   To make compiler messages refer to lines in a C file and not in a
Cfunctions generated header file, use the `--write-line-numbers' (`-n')
option.  Cfunctions will generate compiler directives of the form
     #line NUMBER "FILE.c"
   just before it writes each declaration.  Here NUMBER is the line
number of the C file `FILE.c' that the function or variable came from.
The line numbers may be slightly off, because Cfunctions does not
preserve the decorative spacing (*note Spacing::).  However, along,
with the compiler message they should be enough to indicate where
problems lie.

   Particularly this is useful with the GNU Emacs `compile-mode' to go
to the lines in the original C file which contain the errors.

   Unfortunately this will force Cfunctions to update your header file
every time that it is slightly changed, causing possible unnecessary
recompilations of associated files.

   If you always want to write line numbers in generated header files,
add the line
     line numbers: 1
   to a file `.cfunctionsrc' in your top level directory.


File: cfunctions.info,  Node: fake-cfunctions,  Prev: C compiler,  Up: Other programs

6.4 The `fake-cfunctions' script
================================

`fake-cfunctions' is a fake version of Cfunctions which uses `touch' to
update header files.  The reason for having this is so that one can
distribute programs using Cfunctions with `make' rules for generating
header files, without getting user complaints.  For example in
Cfunctions's `configure.in' script for GNU Autoconf there is a test for
Cfunctions as follows:
     CWD=`pwd`
     AC_CHECK_PROG(CFUNCTIONS, cfunctions, cfunctions,
                   "$CWD/fake-cfunctions")
   then in each `Makefile.in' there is a variable `CFUNCTIONS' which
the `configure' script fills in:
     CFUNCTIONS = @CFUNCTIONS@
   In the case that the user doesn't have Cfunctions installed,
`configure' writes something like (assuming the current working
directory is `/tmp/cfunctions-0.24')
     CFUNCTIONS = /tmp/cfunctions-0.24/fake-cfunctions
   whereas if the user does have Cfunctions, `configure' writes
     CFUNCTIONS = cfunctions
   `fake-cfunctions' just updates the file's modification time with
`touch' in order to fool `make', so it won't work if the user makes
major modifications to the C files, but in that case the user should
get Cfunctions.

   Please note that the `fake-cfunctions' script is not under the GNU
GPL and you may use it whatever your licence terms are.


File: cfunctions.info,  Node: index,  Prev: Other programs,  Up: Top

Index
*****

 [index ]
* Menu:

* #ifdef HEADER:                         Extra header information.
                                                              (line  13)
* #ifdef LOCAL_H:                        Extra local header information.
                                                              (line   8)
* #line instructions:                    Making tag tables.   (line  11)
* --advert:                              Invoking Cfunctions. (line  10)
* --backup:                              Invoking Cfunctions. (line  16)
* --copy-c-ex:                           Invoking Cfunctions. (line  21)
* --cpp:                                 Invoking Cfunctions. (line  27)
* --cpp-arg:                             Invoking Cfunctions. (line  92)
* --debug:                               Invoking Cfunctions. (line  31)
* --etags:                               Invoking Cfunctions. (line  35)
* --extensions:                          Invoking Cfunctions. (line 139)
* --global:                              Invoking Cfunctions. (line  39)
* --global-macro:                        Invoking Cfunctions. (line  43)
* --help:                                Invoking Cfunctions. (line  49)
* --include-c-ex:                        Invoking Cfunctions. (line  53)
* --individual:                          Invoking Cfunctions. (line  58)
* --keep:                                Invoking Cfunctions. (line  63)
* --line-numbers:                        Invoking Cfunctions. (line  83)
* --local:                               Invoking Cfunctions. (line  67)
* --local-macro:                         Invoking Cfunctions. (line  72)
* --no-upgrade:                          Invoking Cfunctions. (line 116)
* --output:                              Invoking Cfunctions. (line  88)
* --proto-macro:                         Invoking Cfunctions. (line  96)
* --static:                              Invoking Cfunctions. (line 102)
* --suffix:                              Invoking Cfunctions. (line 106)
* --tags:                                Invoking Cfunctions. (line 112)
* --version:                             Invoking Cfunctions. (line 120)
* --version-control:                     Invoking Cfunctions. (line 125)
* --warn:                                Invoking Cfunctions. (line 129)
* --wrap:                                Invoking Cfunctions. (line 133)
* --write-comments:                      Invoking Cfunctions. (line  78)
* -a:                                    Invoking Cfunctions. (line  10)
* -b:                                    Invoking Cfunctions. (line  16)
* -c:                                    Invoking Cfunctions. (line  21)
* -C:                                    Invoking Cfunctions. (line  27)
* -D:                                    Invoking Cfunctions. (line  31)
* -e:                                    Invoking Cfunctions. (line  35)
* -g:                                    Invoking Cfunctions. (line  39)
* -G:                                    Invoking Cfunctions. (line  43)
* -h:                                    Invoking Cfunctions. (line  49)
* -I:                                    Invoking Cfunctions. (line  53)
* -i:                                    Invoking Cfunctions. (line  58)
* -k:                                    Invoking Cfunctions. (line  63)
* -L:                                    Invoking Cfunctions. (line  72)
* -l:                                    Invoking Cfunctions. (line  67)
* -m:                                    Invoking Cfunctions. (line  78)
* -n:                                    Invoking Cfunctions. (line  83)
* -o:                                    Invoking Cfunctions. (line  88)
* -P:                                    Invoking Cfunctions. (line  92)
* -p:                                    Invoking Cfunctions. (line  96)
* -S:                                    Invoking Cfunctions. (line 106)
* -s:                                    Invoking Cfunctions. (line 102)
* -t:                                    Invoking Cfunctions. (line 112)
* -u:                                    Invoking Cfunctions. (line 116)
* -V:                                    Invoking Cfunctions. (line 125)
* -v:                                    Invoking Cfunctions. (line 120)
* -w:                                    Invoking Cfunctions. (line 133)
* -W:                                    Invoking Cfunctions. (line 129)
* -x:                                    Invoking Cfunctions. (line 139)
* .hin suffix:                           One header.          (line  18)
* //:                                    Comments.            (line  12)
* __attribute__((const)):                C extensions.        (line  17)
* __attribute__((format(printf,a,b))):   C extensions.        (line  24)
* __attribute__((noreturn)):             C extensions.        (line  13)
* advert, changing:                      Advertisement.       (line   6)
* arrays:                                Arrays.              (line   3)
* arrays, multidimensional:              Arrays.              (line  12)
* banner, adding your own:               Advertisement.       (line   6)
* begin macro:                           Redefined C.         (line   8)
* body, of struct, union:                struct body.         (line   6)
* C extensions:                          C extensions.        (line   3)
* C preprocessor:                        CPP.                 (line   6)
* C++ style comments:                    Comments.            (line  12)
* C, redefined:                          Redefined C.         (line   6)
* c-extensions.h:                        Input file format.   (line  11)
* c-extensions.h, licence for <1>:       Copying.             (line  17)
* c-extensions.h, licence for:           Input file format.   (line  30)
* copying Cfunctions:                    Copying.             (line   6)
* copyright:                             Copying.             (line   6)
* cpp:                                   CPP.                 (line   6)
* decorative spacing, not preserved:     Spacing.             (line   6)
* enum:                                  Global variables.    (line  16)
* extern inline:                         Inline functions.    (line  11)
* extern prefix for global variables.:   Global variables.    (line   6)
* external variables <1>:                Global variables.    (line   6)
* external variables:                    Introduction.        (line   8)
* fake-cfunctions:                       fake-cfunctions.     (line   6)
* format of output:                      Spacing.             (line   6)
* format, for input:                     Input file format.   (line   6)
* global header, extra information into: One header.          (line  18)
* global variables:                      Global variables.    (line   6)
* GNU C, C++ style comments allowed:     Comments.            (line  12)
* GNU General Public Licence:            Copying.             (line  17)
* GNU GPL:                               Copying.             (line  17)
* GNU GPL, and c-extensions.h:           Input file format.   (line  30)
* GNU GPL, and fake-cfunctions:          fake-cfunctions.     (line  29)
* GNU Indent:                            Spacing.             (line   6)
* GPL:                                   Copying.             (line  17)
* HEADER:                                Extra header information.
                                                              (line  13)
* heebygeeby:                            struct body.         (line  11)
* hin suffix:                            One header.          (line  18)
* INLINE:                                Inline functions.    (line   6)
* inline in GNU C:                       Inline functions.    (line   6)
* input format:                          Input file format.   (line   6)
* introduction:                          Introduction.        (line   6)
* invocation:                            Invoking Cfunctions. (line   6)
* Kernighan and Ritchie's book, edition 1: Traditional C.     (line   6)
* LOCAL prefix:                          Making local headers.
                                                              (line   6)
* LOCAL_H macro:                         Extra local header information.
                                                              (line   8)
* make, explicit rules:                  make.                (line   8)
* make, fooling:                         make.                (line  19)
* make, teaching patterns:               make.                (line  14)
* multidimensional arrays:               Arrays.              (line  12)
* NO_RETURN:                             C extensions.        (line  13)
* NO_SIDE_FX:                            C extensions.        (line  17)
* one header:                            One header.          (line   6)
* PRINT_FORMAT:                          C extensions.        (line  24)
* pronunciation:                         Introduction.        (line   8)
* PROTO:                                 Traditional C.       (line   8)
* redefined C:                           Redefined C.         (line   6)
* SIMPLE_BACKUP_SUFFIX environment variable: Backups.         (line  10)
* static, ignored:                       Ignoring static.     (line   6)
* struct:                                Global variables.    (line  16)
* struct body:                           struct body.         (line   6)
* struct, parts copied into header:      struct body.         (line   7)
* struct, untagged:                      untagged structs.    (line   6)
* traditional C:                         Traditional C.       (line   6)
* typedef:                               Global variables.    (line  16)
* union:                                 Global variables.    (line  16)
* untagged struct:                       untagged structs.    (line   6)
* VERSION_CONTROL environment variable:  Backups.             (line  10)
* wrapper:                               Wrappers.            (line   7)
* wrapper, for stdout output:            Wrappers.            (line  17)



Tag Table:
Node: Top228
Node: Copying628
Node: Introduction1553
Node: Simple examples2150
Node: Detailed examples3284
Node: Invoking Cfunctions4718
Node: Variable and function declarations8539
Node: Global variables8980
Node: Using struct etc.9415
Node: struct body9869
Node: untagged structs10824
Node: typedef11110
Node: Arrays11367
Node: Ignoring static12188
Node: Traditional C12539
Node: Comments14142
Node: Warnings14681
Node: Output files15610
Node: One header16406
Node: Individual headers17208
Node: Backups17904
Node: Advertisement19063
Node: Wrappers19846
Node: Making tag tables20496
Node: Spacing21100
Node: Input file format21581
Node: C extensions23368
Node: Extra header information24209
Node: Making local headers25005
Node: Extra local header information26240
Node: Inline functions27100
Node: Other programs28305
Node: make28741
Node: CPP30349
Node: Redefined C31053
Node: Mixed ANSI and traditional31312
Node: Declaring functions via the preprocessor32082
Node: C compiler32463
Node: fake-cfunctions33903
Node: index35335

End Tag Table
